int t3=0,t4=0,t5=0;
        unsigned char signature;
        double u,v,w;
        static double SequencerTime4;
        float Temp;
        artExec(fd,"inp:buf:get?",result,15);//从DSP得到开关量接点信息。
        u=result[7];
        v=result[8];
        w=result[9];
        signature=int(result[13]&0x7f);

        switch(signature)
          {
            case 1:
              break;
            case 2:
              break;
            case 3:
              t3=1;
              break;
            case 4:
              t4=1;
              SequencerTime4=gettime(u,v,w);//计算从开始测试到sequencer的Step4的时间。
              break;
            case 5:
              t5=1;
              break;
          }

        if(t3==1)  //未动作 第三阶段
          {   //未动作
              TripTime=-1;
             if(TestObject==1)
              {
                TripTimeValue[ResultCount]=TripTime;
                CurrentValue=CurrentValue+CurrentStep;  //CurrentValue 当前值
                Ferequencer=SystemFrec;
                V1Value=0;
                V2Value=0;
                V3Value=0;
                V1Phase=0;
                V2Phase=0;
                V3Phase=0;
                I1Value=CurrentValue/3;
                I2Value=CurrentValue/3;
                I3Value=CurrentValue/3;
                I1Phase=0;
                I2Phase=0;
                I3Phase=0;
                if(CurrentValue>CurrentEnd+0.001)
                  {
                    output_signal_end(fd);
                //    led8255(LED_VAR1,1);
                    starttest=0;
                    ResultFlag=1;
                    save_f=1;
                    ResultEndPage=ResultCount/16+1; //ResultEndPage 结束页
                    ResultEndCount=ResultCount;     //结束的个数
                  }

                if((ResultCount%16)==1)
                  DisResult=1;
                else
                  DisResult=0;
                display_TestResult(2);
              }

            else if(TestObject==2)
              {
                TripTimeValue[ResultCount]=TripTime;
                VoltageValue=VoltageValue+VoltageStep;
                Ferequencer=SystemFrec;
                V1Value=VoltageValue/2;
                V2Value=VoltageValue/2;
                V3Value=0;
                V1Phase=0;
                V2Phase=180;
                V3Phase=0;
                I1Value=0;
                I2Value=0;
                I3Value=0;
                I1Phase=0;
                I2Phase=0;
                I3Phase=0;
                if(VoltageValue>VoltageEnd+0.001)
                  {
                    output_signal_end(fd);
               //     led8255(LED_VAR1,1);
                    starttest=0;
                    ResultFlag=1;
                    save_f=1;
                    ResultEndPage=ResultCount/16+1;
                    ResultEndCount=ResultCount;
                  }
                if((ResultCount%16)==1)
                  DisResult=1;
                else
                  DisResult=0;
                display_TestResult(2);
              }


            else if(TestObject==3)
              {
                TripTimeValue[ResultCount]=TripTime;
                Ferequencer=Ferequencer+FrequencyStep/FreqTriple;
                V1Value=57.735;
                V2Value=57.735;
                V3Value=57.735;
                V1Phase=0;
                V2Phase=-120;
                V3Phase=120;
                I1Value=0;
                I2Value=0;
                I3Value=0;
                I1Phase=0;
                I2Phase=0;
                I3Phase=0;
                if(Ferequencer>FrequencyEnd+0.001)
                  {
                    output_signal_end(fd);
                  //  led8255(LED_VAR1,1);
                    starttest=0;
                    ResultFlag=1;
                    save_f=1;
                    ResultEndPage=ResultCount/16+1;
                    ResultEndCount=ResultCount;
                  }
                if((ResultCount%16)==1)
                  DisResult=1;
                else
                  DisResult=0;
                display_TestResult(2);
              }

            ResultCount++;
          }
        if(t4==1)
          {  //动作
            TripTime=SequencerTime4-LogicResolution/1000-WaitTime;
            Temp=TripTime*1000;
            Temp=ceil(Temp);
            TripTime=Temp/1000;//将动作时间的限制在小数点后最多只有两位

            TripTimeValue[ResultCount]=TripTime;

            if(TestObject==1)
              {
                TripTimeValue[ResultCount]=TripTime;
                CurrentValue=CurrentValue+CurrentStep;
                Ferequencer=SystemFrec;
                V1Value=0;
                V2Value=0;
                V3Value=0;
                V1Phase=0;
                V2Phase=0;
                V3Phase=0;
                I1Value=CurrentValue/3;
                I2Value=CurrentValue/3;
                I3Value=CurrentValue/3;
                I1Phase=0;
                I2Phase=0;
                I3Phase=0;
                printf("%s  %d\n",__func__,__LINE__);
                if(CurrentValue>CurrentEnd+0.001)
                  {
                    output_signal_end(fd);
              //      led8255(LED_VAR1,1);
                    starttest=0;
                    ResultFlag=1;
                    save_f=1;
                    ResultEndPage=ResultCount/16+1;
                    ResultEndCount=ResultCount;
                    printf("%s  %d\n",__func__,__LINE__);
                  }


                if((ResultCount%16)==1)
                  DisResult=1;
                else
                  DisResult=0;
                display_TestResult(2);
              }
            else if(TestObject==2)
              {
                TripTimeValue[ResultCount]=TripTime;
                VoltageValue=VoltageValue+VoltageStep;
                Ferequencer=SystemFrec;
                V1Value=VoltageValue/2;    //VoltageValue =Voltagestart
                V2Value=VoltageValue/2;
                V3Value=0;
                V1Phase=0;
                V2Phase=180;
                V3Phase=0;
                I1Value=0;
                I2Value=0;
                I3Value=0;
                I1Phase=0;
                I2Phase=0;
                I3Phase=0;
                if(VoltageValue>VoltageEnd+0.001)
                  {
                    output_signal_end(fd);
                //    led8255(LED_VAR1,1);
                    starttest=0;
                    ResultFlag=1;
                    save_f=1;

                    ResultEndPage=ResultCount/16+1;
                    ResultEndCount=ResultCount;

                    printf("%s  %d\n",__func__,__LINE__);
                  }
                if((ResultCount%16)==1)
                  DisResult=1;
                else
                  DisResult=0;
                display_TestResult(2);
              }
            else if(TestObject==3)
              {
                TripTimeValue[ResultCount]=TripTime;
                Ferequencer=Ferequencer+FrequencyStep/FreqTriple;
                V1Value=57.735;
                V2Value=57.735;
                V3Value=57.735;
                V1Phase=0;
                V2Phase=-120;
                V3Phase=120;
                I1Value=0;
                I2Value=0;
                I3Value=0;
                I1Phase=0;
                I2Phase=0;
                I3Phase=0;
                if(Ferequencer>FrequencyEnd+0.001)
                  {
                    output_signal_end(fd);
                 //   led8255(LED_VAR1,1);
                    starttest=0;
                    ResultFlag=1;
                    save_f=1;
                    ResultEndPage=ResultCount/16+1;
                    ResultEndCount=ResultCount;
                    printf("%s  %d\n",__func__,__LINE__);
                  }
                if((ResultCount%16)==1)
                  DisResult=1;
                else
                  DisResult=0;
                display_TestResult(2);
              }
            ResultCount++;
          }

         printf("%s  %d\n",__func__,__LINE__);
        if(t5==1)
          {
            //表示结束了
            printf("%s  %d\n",__func__,__LINE__);

            output_signal_end(fd);
           }

